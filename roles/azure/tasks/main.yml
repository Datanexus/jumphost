# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# Launch an Azure image
--- 
#
# # wait_for doesn't work with a proxy, so we need to ssh and check output
# - name: waiting for {{ item }} with {{ keypair.key.name }}-private-key.pem"
#   local_action: shell /bin/sleep 60 && /usr/bin/ssh -i "./{{ keypair.key.name }}-private-key.pem" "{{ user }}"@"{{ item }}" echo DataNexus
#   register: output
#   retries: 4
#   delay: 15
#   until: output.stdout.find('DataNexus') != -1
#   with_items: "{{ groups.jumphost }}"
#   when:
#     - not ec2|skipped and ec2.changed and ec2.instances|length > 0
# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# discover Azure resource groups, virtual networks, and subnets

- name: JUMPHOST Azure | retrieving resource group by name
  azure_rm_resourcegroup_facts:
    name: "{{ project }}_{{ domain }}"
  register: resourcegroup_by_name
  when: project is defined and domain is defined

- name: JUMPHOST Azure | setting vpc facts
  set_fact:
    specified_resourcegroup: "{{ resourcegroup_by_name.ansible_facts.azure_resourcegroups.0 }}"
  when: resourcegroup_by_name.ansible_facts.azure_resourcegroups.0 is defined

- name: JUMPHOST Azure | retrieving facts for {{ project }}_{{ domain }} virtual network
  azure_rm_virtualnetwork_facts:
    resource_group: "{{ specified_resourcegroup.name }}"
    name: "{{ project }}_{{ domain }}_vnet"
  register: virtualnetwork_by_name
  when: project is defined and domain is defined

- name: JUMPHOST Azure | setting internal private subnet
  set_fact:
    internal_private_subnet_result: "{{ virtualnetwork_by_name.ansible_facts.azure_virtualnetworks.0.properties.subnets.0 }}"

- name: JUMPHOST Azure | setting internal public subnet
  set_fact:
    internal_public_subnet_result: "{{ virtualnetwork_by_name.ansible_facts.azure_virtualnetworks.0.properties.subnets.1 }}"

- name: JUMPHOST Azure | creating ssh security group
  azure_rm_securitygroup:
    resource_group: "{{ specified_resourcegroup.name }}"
    name: "dnsg_{{ project }}_ssh_public_external"
    purge_rules: yes
    rules:
      - name: DenyAll
        proto: '*'
        source_address_prefix: '*'
        source_port_range: '*'
        destination_address_prefix: '*'
        destination_port_range: '*'
        access: Deny
        direction: Inbound
        priority: 200
      - name: AllowSSH
        proto: TCP
        source_address_prefix: '*'
        source_port_range: '*'
        destination_address_range: "{{ internal_public_subnet_result.properties.addressPrefix }}"
        destination_port_range: 22
        access: Allow
        direction: Inbound
        priority: 100
  register: sg_ssh_private

- name: JUMPHOST Azure | creating closed security group
  azure_rm_securitygroup:
    resource_group: "{{ specified_resourcegroup.name }}"
    name: "dnsg_{{ project }}_closed"
    purge_rules: yes
    rules:
      - name: DenyAll
        proto: '*'
        source_address_prefix: '*'
        source_port_range: '*'
        destination_address_range: '*'
        destination_port_range: '*'
        access: Deny
        direction: Inbound
        priority: 200
  register: sg_closed

- name: JUMPHOST Azure | setting key path to {{ key_path }}
  set_fact: key_path="{{ ansible_env.PWD }}"
  when: key_path is not defined

- name: JUMPHOST Azure | checking {{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem
  stat: path="{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem"
  register: existing_key

# create new SSH key - azure supports 2048bit+ RSA 
- block:    
  - name: JUMPHOST Azure | creating {{ cloud }}-{{ region }}-{{ project }}-{{ application }}
    command: "/usr/bin/ssh-keygen -b 2048 -t rsa -f {{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem -N ''"
    register: new_azure_keypair

  - name: setting read-only permissions on key {{ cloud }}-{{ region }}-{{ project }}-{{ application }}
    file:
      path: "{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem.pub"
      mode: 0400
    when:
      - new_azure_keypair.changed
  when:
    - not existing_key.stat.exists

- name: JUMPHOST Azure | creating {{ application }} virtual {{ project }}_{{ application }}_external NIC
  azure_rm_networkinterface:
    resource_group: "{{ specified_resourcegroup.name }}"
    name: "{{ project }}_{{ application }}_external"
    virtual_network: "{{ virtualnetwork_by_name.ansible_facts.azure_virtualnetworks.0.name }}"
    subnet_name: '{{ internal_public_subnet_result.name }}'
    security_group: "dnsg_{{ project }}_ssh_public_external"
    ip_configurations:
      - name: ipconfig1
        public_ip_address_name: "{{ project }}_{{ application }}_external_ip"
        primary: yes
    tags:
      Application: "{{ application }}"
      Role: "{{ role | default ('none') }}"
      Tenant: "{{ tenant }}"
      Project: "{{ project }}"
      Cloud: "{{ cloud }}"
      Domain: "{{ domain }}"
      Cluster: "{{ cluster | default ('none') }}"
      Dataflow: "{{ dataflow | default ('none') }}"
        
- name: JUMPHOST Azure | creating {{ application }} virtual {{ project }}_{{ application }}_internal NIC
  azure_rm_networkinterface:
    resource_group: "{{ specified_resourcegroup.name }}"
    name: "{{ project }}_{{ application }}_internal"    
    virtual_network: "{{ virtualnetwork_by_name.ansible_facts.azure_virtualnetworks.0.name }}"
    subnet_name: "{{ internal_private_subnet_result.name }}"
    security_group: "dnsg_{{ project }}_closed"
    ip_configurations:
      - name: ipconfig1
        primary: yes
    tags:
      Application: "{{ application }}"  
      Role: "{{ role | default ('none') }}"
      Tenant: "{{ tenant }}"
      Project: "{{ project }}"
      Cloud: "{{ cloud }}"
      Domain: "{{ domain }}"
      Cluster: "{{ cluster | default ('none') }}"
      Dataflow: "{{ dataflow | default ('none') }}"

# this is not necessarily idempotent because we're shelling out
- name: JUMPHOST Azure | creating {{ application }} VM in {{ specified_resourcegroup.name }}
  command: "az vm create --resource-group {{ specified_resourcegroup.name }} --name {{ project }}-{{ application }} --location {{ region }} --nics {{ project }}_{{ application }}_external {{ project }}_{{ application }}_internal  --size {{ image | default('Standard_D8_v3') }} --image Centos --admin-username {{ user }} --authentication-type ssh --ssh-key-value {{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem.pub --tags Name={{ project }}_{{ application }} Tenant={{ tenant }} Project={{ project }} Cloud={{ cloud }} Domain={{ domain }} Application={{ application }} Cluster={{ cluster | default ('none') }} Role={{ role | default ('none') }} Dataflow={{ dataflow | default ('none') }}"

- name: JUMPHOST Azure | discovering {{ application }}
  azure_rm_publicipaddress_facts:
    resource_group: "{{ specified_resourcegroup.name }}"
    name: "{{ project }}_{{ application }}_external_ip"
  register: found_jumphosts

- name: JUMPHOST Azure | adding all {{ application }} instances to {{ application }} host group
  add_host: hostname="{{ item.properties.ipAddress }}" groupname=jumphost ansible_user="{{ user }}" ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem"
  with_items: "{{ found_jumphosts.ansible_facts.azure_publicipaddresses }}"

- local_action: shell echo "{{ internal_subnet }}" | /bin/sed 's/0\/24/*/'
  register: private_wildcard
    
- name: JUMPHOST Azure | configuring ssh for platform access
  blockinfile:
    state: present
    create: yes
    insertafter: EOF
    path: "{{ ansible_env.HOME }}/.ssh/config"
    marker: "# jumphost {mark} ANSIBLE MANAGED BLOCK"
    block: |
      Host {{ tenant }}_jumphost_{{ domain }}
          Hostname {{ found_jumphosts.ansible_facts.azure_publicipaddresses.0.properties.ipAddress }}
          User centos
          IdentityFile {{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem
          StrictHostKeyChecking no

      Host {{ private_wildcard.stdout }}
          User centos
          IdentitiesOnly yes
          StrictHostKeyChecking no
          ProxyCommand ssh {{ tenant }}_jumphost_{{ domain }} -W %h:%p

# # wait_for doesn't work with a proxy, so we need to ssh and check output
# - name: JUMPHOST | waiting for {{ item }} with {{ keypair.key.name }}-private-key.pem"
#   local_action: shell /bin/sleep 60 && /usr/bin/ssh -i "{{ key_path }}/{{ cloud }}-{{ keypair.key.name }}-private-key.pem" "{{ user }}"@"{{ item.private_ip }}" echo DataNexus
#   register: output
#   retries: 4
#   delay: 15
#   until: output.stdout.find('DataNexus') != -1
#   with_items: "{{ ec2.instances }}"
#   when:
#     - not ec2|skipped and ec2.changed and ec2.instances|length > 0

# multiple NICS fails using ansible
# - name: JUMPHOST | creating {{ application }} VM in {{ specified_resourcegroup.name }}
#   azure_rm_virtualmachine:
#     resource_group: "{{ specified_resourcegroup.name }}"
#     name: "{{ project }}-{{ application }}"
#     # storage_account: '{{ vmname }}'
#    #  storage_container: '{{ vmname }}'
#    #  storage_blob: '{{ vmname }}.vhd'
#     network_interface_names: [  "{{ project }}_{{ application }}_internal", "{{ project }}_{{ application }}_external" ]
#     vm_size: "{{ image }}"
#     admin_username: "{{ user }}"
#     ssh_password_enabled: False
#     ssh_public_keys:
#       - path: "/home/{{ user }}/.ssh/authorized_keys"
#         key_data: "{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem.pub"
#     image:
#       offer: CentOS
#       publisher: OpenLogic
#       sku: '7.4'
#       version: latest
