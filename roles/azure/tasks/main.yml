# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# Launch an Azure image
--- 
# discover Azure resource groups, virtual networks, and subnets
- name: JUMPHOST AZURE | retrieving resource group by name
  azure_rm_resourcegroup_facts:
    name: "{{ project }}_{{ domain }}"
  register: resourcegroup_by_name
  when: project is defined and domain is defined

- name: JUMPHOST AZURE | setting vpc facts
  set_fact:
    specified_resourcegroup: "{{ resourcegroup_by_name.ansible_facts.azure_resourcegroups.0 }}"
  when: resourcegroup_by_name.ansible_facts.azure_resourcegroups.0 is defined

- name: JUMPHOST AZURE | retrieving facts for {{ project }}_{{ domain }} virtual network
  azure_rm_virtualnetwork_facts:
    resource_group: "{{ specified_resourcegroup.name }}"
    name: "{{ project }}_{{ domain }}_vnet"
  register: virtualnetwork_by_name
  when: project is defined and domain is defined

- name: JUMPHOST AZURE | setting internal private subnet
  set_fact:
    internal_private_subnet_result: "{{ virtualnetwork_by_name.ansible_facts.azure_virtualnetworks.0.properties.subnets.0 }}"

- name: JUMPHOST AZURE | setting internal public subnet
  set_fact:
    internal_public_subnet_result: "{{ virtualnetwork_by_name.ansible_facts.azure_virtualnetworks.0.properties.subnets.1 }}"

- name: JUMPHOST AZURE | creating ssh security group
  azure_rm_securitygroup:
    resource_group: "{{ specified_resourcegroup.name }}"
    name: "dnsg_{{ project }}_ssh_public_external"
    purge_rules: yes
    rules:
      - name: DenyAll
        protocol: '*'
        source_address_prefix: '*'
        source_port_range: '*'
        destination_address_prefix: '*'
        destination_port_range: '*'
        access: Deny
        direction: Inbound
        priority: 200
      - name: AllowAllSSH
        protocol: Tcp
        source_address_prefix: '*'
        source_port_range: '*'
        destination_address_prefix: "{{ internal_public_subnet_result.properties.addressPrefix }}"
        destination_port_range: 22
        access: Allow
        direction: Inbound
        priority: 100
  register: sg_ssh_private

- name: JUMPHOST AZURE | creating closed security group
  azure_rm_securitygroup:
    resource_group: "{{ specified_resourcegroup.name }}"
    name: "dnsg_{{ project }}_closed"
    purge_rules: yes
    rules:
      - name: DenyAll
        protocol: '*'
        source_address_prefix: '*'
        source_port_range: '*'
        destination_address_prefix: '*'
        destination_port_range: '*'
        access: Deny
        direction: Inbound
        priority: 200
  register: sg_closed

- name: JUMPHOST AZURE | setting key path to {{ key_path | default (playbook_dir) }}
  set_fact: key_path="{{ key_path | default (playbook_dir) }}"

- name: JUMPHOST AZURE | checking {{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem
  stat: path="{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem"
  register: existing_key

# create new SSH key - azure supports 2048bit+ RSA 
- block:    
  - name: JUMPHOST AZURE | creating {{ cloud }}-{{ region }}-{{ project }}-{{ application }}
    command: "/usr/bin/ssh-keygen -b 2048 -t rsa -f {{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem -N ''"
    register: new_azure_keypair

  - name: setting read-only permissions on key {{ cloud }}-{{ region }}-{{ project }}-{{ application }}
    file:
      path: "{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem.pub"
      mode: 0400
    when:
      - new_azure_keypair.changed
  when:
    - not existing_key.stat.exists

# the math is overkill, but it's useful if we want to get more complicated
- name: JUMPHOST OVERLAY | setting count to {{ count }}
  set_fact:
    count: "{{ count | default(1) | int * 1  }}"
    
- name: JUMPHOST AZURE | creating {{ count }} {{ application }} virtual {{ project }}_{{ application }}_external NIC
  azure_rm_networkinterface:
    resource_group: "{{ specified_resourcegroup.name }}"
    name: "{{ project }}_{{ application }}_{{ item }}_external"
    virtual_network: "{{ virtualnetwork_by_name.ansible_facts.azure_virtualnetworks.0.name }}"
    subnet_name: '{{ internal_public_subnet_result.name }}'
    security_group_name: "dnsg_{{ project }}_ssh_public_external"
    ip_configurations:
      - name: ipconfig1
        public_ip_address_name: "{{ project }}_{{ application }}_{{ item }}_external_ip"
        primary: yes
    tags:
      Application: "{{ application }}"
      Role: "{{ role | default ('none') }}"
      Tenant: "{{ tenant }}"
      Project: "{{ project }}"
      Cloud: "{{ cloud }}"
      Domain: "{{ domain }}"
      Cluster: "{{ cluster | default ('none') }}"
      Dataflow: "{{ dataflow | default ('none') }}"
  with_sequence: count={{ count }}
    
- name: JUMPHOST AZURE | creating {{ count }} {{ application }} virtual {{ project }}_{{ application }}_internal NIC
  azure_rm_networkinterface:
    resource_group: "{{ specified_resourcegroup.name }}"
    name: "{{ project }}_{{ application }}_{{ item }}_internal"    
    virtual_network: "{{ virtualnetwork_by_name.ansible_facts.azure_virtualnetworks.0.name }}"
    subnet_name: "{{ internal_private_subnet_result.name }}"
    security_group_name: "dnsg_{{ project }}_closed"
    ip_configurations:
      - name: ipconfig1
        primary: no
    tags:
      Application: "{{ application }}"  
      Role: "{{ role | default ('none') }}"
      Tenant: "{{ tenant }}"
      Project: "{{ project }}"
      Cloud: "{{ cloud }}"
      Domain: "{{ domain }}"
      Cluster: "{{ cluster | default ('none') }}"
      Dataflow: "{{ dataflow | default ('none') }}"
  with_sequence: count={{ count }}

- set_fact:
    key_contents: "{{ lookup('file', item) }}"
  with_items:
    - "{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem.pub"

- name: JUMPHOST | creating {{ count }} {{ application }} VM in {{ specified_resourcegroup.name }}
  azure_rm_virtualmachine:
    resource_group: "{{ specified_resourcegroup.name }}"
    location: "{{ region }}"
    name: "{{ project }}-{{ application }}-{{ item }}"
    network_interface_names:
      - "{{ project }}_{{ application }}_{{ item }}_external"
      - "{{ project }}_{{ application }}_{{ item }}_internal"
    vm_size: "{{ type }}"
    managed_disk_type: "{{ root_disk_type | default('Standard_LRS') }}"
    admin_username: "{{ user }}"
    ssh_password_enabled: False
    ssh_public_keys:
      - path: "/home/{{ user }}/.ssh/authorized_keys"
        key_data: "{{ key_contents }}"
    image: "{{ image }}"
    tags:
      Application: "{{ application }}"  
      Role: "{{ role | default ('none') }}"
      Tenant: "{{ tenant }}"
      Project: "{{ project }}"
      Cloud: "{{ cloud }}"
      Domain: "{{ domain }}"
      Cluster: "{{ cluster | default ('none') }}"
      Dataflow: "{{ dataflow | default ('none') }}"
  with_sequence: count={{ count }}

# # wait_for doesn't work with a proxy, so we need to ssh and check output
# - name: JUMPHOST | waiting for {{ item }} with {{ keypair.key.name }}-private-key.pem"
#   local_action: shell /bin/sleep 60 && /usr/bin/ssh -i "{{ key_path }}/{{ cloud }}-{{ keypair.key.name }}-private-key.pem" "{{ user }}"@"{{ item.private_ip }}" echo DataNexus
#   register: output
#   retries: 4
#   delay: 15
#   until: output.stdout.find('DataNexus') != -1
#   with_items: "{{ ec2.instances }}"
#   when:
#     - not ec2|skipped and ec2.changed and ec2.instances|length > 0
