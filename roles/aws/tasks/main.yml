# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# Launch an AWS AMI
---
- include_tasks: discover-vpc.yml

# these meta-data tags need not be defined so need to handle separately
- name: CLOUD ({{ cloud }}) | tagging {{ ec2_tag_Role }} Role
  set_fact:
    tag_dictionary: "{{ tag_dictionary | combine({'Role':ec2_tag_Role}) }}"
  when: ec2_tag_Role is defined

- name: CLOUD ({{ cloud }}) | tagging {{ ec2_tag_Role }} Role
  set_fact:
    tag_dictionary: "{{ tag_dictionary | combine({'Role':'none'}) }}"
  when: ec2_tag_Role is not defined

- name: CLOUD ({{ cloud }}) | tagging {{ cluster }} cluster
  set_fact:
    tag_dictionary: "{{ tag_dictionary | combine({'Cluster':cluster}) }}"
  when: cluster is defined

- name: CLOUD ({{ cloud }}) | tagging {{ cluster }} cluster
  set_fact:
    tag_dictionary: "{{ tag_dictionary | combine({'Cluster':'none'}) }}"
  when: cluster is not defined

- name: CLOUD ({{ cloud }}) | tagging dataflow as {{ dataflow }}
  set_fact:
    tag_dictionary: "{{ tag_dictionary | combine({'Dataflow':dataflow}) }}"
  when: dataflow is defined

- name: CLOUD ({{ cloud }}) | tagging dataflow as {{ dataflow }}
  set_fact:
    tag_dictionary: "{{ tag_dictionary | combine({'Dataflow':'none'}) }}"
  when: dataflow is not defined

- name: CLOUD ({{ cloud }}) | creating closed security group
  local_action:
    module: ec2_group
    name: "dnsg_{{ project }}_closed"
    description: "restrict all inbound and unrestricted egress rules (ansible)"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    rules_egress:
      # Allow all outbound
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: sg_closed

- name: CLOUD ({{ cloud }}) | creating ssh security group
  local_action:
    module: ec2_group
    name: "dnsg_{{ project }}_ssh_private_internal"
    description: "subnet ssh ingress and unrestricted egress rules (ansible)"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    rules:
      # SSH access
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "{{ restrict_ssh | ternary(internal_subnet,'0.0.0.0/0') }}"
    rules_egress:
      # Allow all outbound
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: sg_ssh_private

# jumphost interfaces are reversed and publicly reachable
- name: JUMPHOST ({{ cloud }}) | setting private ACL
  set_fact:
    private_interface_acl: "{{ sg_ssh_private.group_id }}"
  when:
    - sg_ssh_private is defined

# all public internal interfaces are closed by default
- name: JUMPHOST ({{ cloud }}) | setting public ACL
  set_fact:
    public_interface_acl: "{{ sg_closed.group_id }}"

- name: JUMPHOST ({{ cloud }}) | checking {{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem
  stat: path="{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem"
  register: existing_key

- block:

  - name: JUMPHOST ({{ cloud }}) | generating public key from {{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem
    command: "/usr/bin/ssh-keygen -f {{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem -y"
    register: public_key_from_pem
    
  - name: JUMPHOST ({{ cloud }}) | using existing {{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}
    ec2_key:
      region: "{{ region }}"
      state: present
      name: "{{ region }}-{{ project }}-{{ application }}-{{ domain }}"
      key_material: "{{ public_key_from_pem.stdout }}" 
    register: old_keypair

  - set_fact: keypair="{{ old_keypair }}"

  when: 
    - existing_key.stat.exists

- block:

  - name: JUMPHOST ({{ cloud }}) | creating key {{ region}}-{{ project }}-{{ application }}-{{ domain }}
    ec2_key:
      name: "{{ region }}-{{ project }}-{{ application }}-{{ domain }}"
      region: "{{ region }}"
    register: new_keypair

  - set_fact: keypair="{{ new_keypair }}"

  - name: JUMPHOST ({{ cloud }}) | saving key {{ region }}-{{ project }}-{{ application }}-{{ domain }}
    copy:
      dest: "{{ key_path }}/{{ cloud }}-{{ keypair.key.name }}-private-key.pem"
      content: "{{ keypair.key.private_key }}"
      mode: 0400

  when:
    - not existing_key.stat.exists

- block:

  - name: JUMPHOST ({{ cloud }}) | retrieving image id for datanexus-{{ image_base }}-base
    ec2_ami_facts:
      region: "{{ region }}"
      filters:
        name: "datanexus-{{ image_base }}-base*"
    register: ami_facts

  - fail:
      msg: "datanexus-{{ image_base }}-base not found; run image creation utility or use another base"
    when: ami_facts.images | length == 0

  - name: JUMPHOST ({{ cloud }}) | using {{ ami_facts.images.0.image_id }} as base image
    set_fact:
      image_id: "{{ ami_facts.images.0.image_id }}"

  when: image_id is not defined

- name: JUMPHOST ({{ cloud }}) | launching {{ instances }} AMIs
  ec2:
    key_name: "{{ keypair.key.name }}"
    group_id: "{{ private_interface_acl  }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ image_id | default(ami_facts.images.0.image_id) }}"
    vpc_subnet_id: "{{ external_subnet_id }}"
    region: "{{ region }}"
    assign_public_ip: "{{ public_ip | default('yes') }}"
    wait: true
    exact_count: "{{ instances | default(1) }}"
    count_tag: "{{ tag_dictionary }}"
    instance_tags: "{{ tag_dictionary }}"
    ebs_optimized: false
    volumes:
      - device_name: "{{ ami_facts.images.0.root_device_name }}"
        volume_type: gp2
        volume_size: "{{ ec2_root_volume_size }}"
        delete_on_termination: true
  register: ec2
  when:
    - ami_facts is defined
    - ec2_instance_type is defined

- name: CLOUD ({{ cloud }}) | pausing for virtual machines to boot
  pause:
    seconds: 60
  when:
      - not ec2 is skipped and ec2.changed and ec2.instances | length > 0
    
- name: JUMPHOST ({{ cloud }}) | creating private internal ENI as eth1
  ec2_eni:
    description: "private internal"
    instance_id: "{{ item.id }}"
    region: "{{ region }}"
    subnet_id: "{{ internal_subnet_id }}"
    device_index: 1
    attached: yes
    security_groups: "{{ public_interface_acl }}"
    state: present
  register: private_eni
  with_items: "{{ ec2.instances }}"
  when:
    - not ec2 is skipped and ec2.changed and ec2.instances|length > 0

- name: JUMPHOST ({{ cloud }}) | configuring private internal ENI to delete on termination
  ec2_eni:
    region: "{{ region }}"
    eni_id: "{{ item.interface.id }}"
    subnet_id: "{{ internal_subnet_id }}"
    delete_on_termination: yes
  with_items: "{{ private_eni.results }}"
  when:
    - not private_eni is skipped and private_eni.changed and private_eni.results | length > 0
    
- name: JUMPHOST ({{ cloud }}) | building {{ application }} host group
  add_host: hostname="{{ public_ip | ternary(item.public_ip, item.private_ip) }}" groups="{{ application }}" ansible_ssh_user="{{ user }}" ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ keypair.key.name }}-private-key.pem"
  with_items: "{{ ec2.instances }}"
  when:
    - not ec2 is skipped and ec2.changed and ec2.instances | length > 0
