# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# Launch an AWS AMI
---
- name: JUMPHOST AWS | retrieving default VPC ID
  local_action:
    module: ec2_vpc_net_facts
    region: "{{ region }}"
    filters:
      cidr-block: "{{ cidr_block }}"
  register: specified_vpc

- name: JUMPHOST AWS | retrieving {{ internal_subnet }} ID for {{ cidr_block }} in {{ cloud }} {{ region }}
  local_action:
    module: ec2_vpc_subnet_facts
    region: "{{ region }}"
    filters:
      cidr-block: "{{ internal_subnet }}"
  register: internal_subnet_result
  when:
    - internal_subnet is defined

- name: JUMPHOST AWS | retrieving {{ external_subnet }} ID for {{ cidr_block }} in {{ cloud }} {{ region }}
  local_action:
    module: ec2_vpc_subnet_facts
    region: "{{ region }}"
    filters:
      cidr-block: "{{ external_subnet }}"
  register: external_subnet_result
  when:
    - external_subnet is defined

- set_fact:
    internal_subnet_id: "{{ internal_subnet_result.subnets.0.id }}"
  when:
    - internal_subnet_result.skipped is not defined

- set_fact:
    external_subnet_id: "{{ external_subnet_result.subnets.0.id }}"
  when:
    - external_subnet_result.skipped is not defined

- block:    
  - name: JUMPHOST AWS | searching for CentOS 7 AMI for specified region
    ec2_ami_facts:
      region: "{{ region }}"
      owner: 679593333241
      sort: name
      sort_order: descending
      sort_end: 1
      filters:
        name: "CentOS Linux 7 x86_64*"
        virtualization_type: hvm
    register: amis_found

  - set_fact:
      image: "{{ amis_found.results[0].ami_id }}"
  when:
    - image is not defined

- name: JUMPHOST AWS | creating open security group
  local_action:
    module: ec2_group
    name: "{{ application }}_open"
    description: "unrestricted ingress and egress rules (ansible)"
    vpc_id: "{{ specified_vpc.vpcs.0.id }}"
    region: "{{ region }}"
    rules:
      - proto: all
        cidr_ip: "{{ internal_subnet }}"
    rules_egress:
      # Allow all outbound
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: sg_open
  
- name: JUMPHOST AWS | creating ssh security group
  local_action:
    module: ec2_group
    name: "{{ application }}_ssh"
    description: "ssh ingress and unrestricted egress rules (ansible)"
    vpc_id: "{{ specified_vpc.vpcs.0.id }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
    rules_egress:
      # Allow all outbound
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: sg_ssh

- name: JUMPHOST AWS | checking {{ cloud }}-{{ region }}-{{ project }}-{{ application }}-private-key.pem
  stat: path="./{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-private-key.pem"
  register: existing_key

- block: 
  - name: JUMPHOST AWS | generating public key from {{ cloud }}-{{ region }}-{{ project }}-{{ application }}-private-key.pem
    command: "/usr/bin/ssh-keygen -f {{ cloud }}-{{ region }}-{{ project }}-{{ application }}-private-key.pem -y"
    register: public_key_from_pem
    
  - name: JUMPHOST AWS | using existing {{ cloud }}-{{ region }}-{{ project }}-{{ application }}
    ec2_key:
      region: "{{ region }}"
      state: present
      name: "{{ region }}-{{ project }}-{{ application }}"
      key_material: "{{ public_key_from_pem.stdout }}" 
    register: old_keypair

  - set_fact: keypair="{{ old_keypair }}"
  when: 
    - existing_key.stat.exists

- block:
  - name: JUMPHOST AWS | creating {{ cloud }}-{{ region}}-{{ project }}-{{ application }}
    ec2_key:
      name: "{{ region }}-{{ project }}-{{ application }}"
      region: "{{ region }}"
    register: new_keypair
    
  - set_fact: keypair="{{ new_keypair }}"

  - name: JUMPHOST AWS | saving {{ cloud }}-{{ region }}-{{ project }}-{{ application }}
    copy:
      dest: "./{{ cloud }}-{{ keypair.key.name }}-private-key.pem"
      content: "{{ keypair.key.private_key }}"
      mode: 0400
  when:
    - not existing_key.stat.exists

- name: JUMPHOST AWS | setting count to single node unless otherwise specified
  set_fact:
    count: 1 
  when: count is not defined

- name: JUMPHOST AWS | launching AMI
  ec2:
    key_name: "{{ keypair.key.name }}"
    group_id: "{{ sg_ssh.group_id }}"
    instance_type: "{{ type }}"
    image: "{{ image }}"
    vpc_subnet_id: "{{ external_subnet_id }}"
    region: "{{ region }}"
    assign_public_ip: yes
    wait: true
    exact_count: "{{ count }}"
    count_tag:
      Name: "{{ project }}_{{ application }}"
      Tenant: "{{ tenant }}"
      Project: "{{ project }}"
      Cloud: "{{ cloud }}"
      Domain: "{{ domain }}"
      Application: "{{ application }}"
      Cluster: "{{ cluster | default ('none') }}"
      Role: "{{ role | default ('none') }}"
      Dataflow: "{{ dataflow | default ('none') }}"
    instance_tags:
      Name: "{{ project }}_{{ application }}"
      Tenant: "{{ tenant }}"
      Project: "{{ project }}"
      Cloud: "{{ cloud }}"
      Domain: "{{ domain }}"
      Application: "{{ application }}"
      Cluster: "{{ cluster | default ('none') }}"
      Role: "{{ role | default ('none') }}"
      Dataflow: "{{ dataflow | default ('none') }}"
    ebs_optimized: false
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ root_volume }}"
        delete_on_termination: true
  register: ec2

- local_action: shell echo "{{ internal_subnet }}" | /usr/bin/sed 's/0\/24/*/'
  register: private_wildcard
  when:
    - not ec2 is skipped and ec2.changed and ec2.instances | length > 0
    
- name: JUMPHOST AWS | configuring ssh for platform access
  blockinfile:
    state: present
    create: yes
    insertafter: EOF
    path: "{{ ansible_env.HOME }}/.ssh/config"
    marker: "# jumphost {mark} ANSIBLE MANAGED BLOCK"
    block: |
      Host dn_jumphost
          Hostname {{ ec2.instances.0.public_ip }}
          User centos
          IdentityFile {{ ansible_env.PWD }}/{{ keypair.key.name }}-private-key.pem
          StrictHostKeyChecking no
        
      Host {{ private_wildcard.stdout }}
          User centos
          IdentitiesOnly yes
          StrictHostKeyChecking no
          ProxyCommand ssh dn_jumphost -W %h:%p
  when:
    - not ec2 is skipped and ec2.changed and ec2.instances | length > 0
    
- name: JUMPHOST AWS | creating private internal ENI as eth1 
  ec2_eni:
    description: "private internal"
    instance_id: "{{ item.id }}"
    region: "{{ region }}"
    subnet_id: "{{ internal_subnet_id }}"
    device_index: 1
    attached: true
    security_groups: "{{ sg_open.group_id }}"
    state: present
  register: private_eni
  with_items: "{{ ec2.instances }}"
  when:
    - not ec2 is skipped and ec2.changed and ec2.instances|length > 0
    - internal_subnet_id is defined

- name: JUMPHOST AWS | configuring private internal ENI to delete on termination
  ec2_eni:
    region: "{{ region }}"
    eni_id: "{{ item.interface.id }}"
    subnet_id: "{{ internal_subnet_id }}"
    delete_on_termination: true
  with_items: "{{ private_eni.results }}"
  when:
    - not private_eni is skipped and private_eni.changed and private_eni.results | length > 0
    
- name: JUMPHOST AWS | building {{ application }} host group
  add_host: hostname="{{ item.public_ip }}" groups=jumphost ansible_ssh_private_key_file="{{ ansible_env.PWD }}/{{ cloud }}-{{ keypair.key.name }}-private-key.pem" ansible_ssh_user="{{ user }}"
  with_items: "{{ ec2.instances }}"
  when:
    - not ec2 is skipped and ec2.changed and ec2.instances | length > 0

# wait_for doesn't work with a proxy, so we need to ssh and check output
- name: JUMPHOST AWS | waiting for {{ item }} with {{ keypair.key.name }}-private-key.pem
  local_action: shell /bin/sleep 60 && /usr/bin/ssh -i "{{ ansible_env.PWD }}/{{ cloud }}-{{ keypair.key.name }}-private-key.pem" "{{ user }}"@"{{ item }}" echo DataNexus
  register: output
  retries: 4
  delay: 15
  until: output.stdout.find('DataNexus') != -1
  with_items: "{{ groups.jumphost }}"
  when:
    - not ec2 is skipped and ec2.changed and ec2.instances|length > 0
